diff --git a/src/ScrollViewGesture.tsx b/src/ScrollViewGesture.tsx
index e2f4dace5fb013bff35ff595a3c1b3fbc0fa20a7..dcf92a7da65753a9837ccf36311452d4011f2ead 100644
--- a/src/ScrollViewGesture.tsx
+++ b/src/ScrollViewGesture.tsx
@@ -1,11 +1,11 @@
-import type { PropsWithChildren } from "react";
-import React, { useCallback, useMemo } from "react";
-import type { StyleProp, ViewStyle } from "react-native";
-import type { GestureStateChangeEvent, PanGestureHandlerEventPayload } from "react-native-gesture-handler";
-import {
-  Gesture,
-  GestureDetector,
-} from "react-native-gesture-handler";
+import type { PropsWithChildren } from 'react';
+import React, { useCallback, useMemo } from 'react';
+import type { StyleProp, ViewStyle } from 'react-native';
+import type {
+  GestureStateChangeEvent,
+  PanGestureHandlerEventPayload,
+} from 'react-native-gesture-handler';
+import { Gesture, GestureDetector } from 'react-native-gesture-handler';
 import Animated, {
   cancelAnimation,
   measure,
@@ -15,28 +15,29 @@ import Animated, {
   useDerivedValue,
   useSharedValue,
   withDecay,
-} from "react-native-reanimated";
+} from 'react-native-reanimated';
 
-import { Easing } from "./constants";
-import { CTX } from "./store";
-import type { WithTimingAnimation } from "./types";
-import { dealWithAnimation } from "./utils/dealWithAnimation";
+import { Easing } from './constants';
+import { CTX } from './store';
+import type { WithTimingAnimation } from './types';
+import { dealWithAnimation } from './utils/dealWithAnimation';
 
 interface Props {
-  size: number
-  infinite?: boolean
-  testID?: string
-  style?: StyleProp<ViewStyle>
-  onScrollBegin?: () => void
-  onScrollEnd?: () => void
-  onTouchBegin?: () => void
-  onTouchEnd?: () => void
-  translation: Animated.SharedValue<number>
+  size: number;
+  infinite?: boolean;
+  testID?: string;
+  style?: StyleProp<ViewStyle>;
+  onScrollBegin?: () => void;
+  onScrollEnd?: () => void;
+  onTouchBegin?: () => void;
+  onTouchEnd?: () => void;
+  translation: Animated.SharedValue<number>;
 }
 
-const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
+const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = props => {
   const {
     props: {
+      panGestureHandlerProps,
       vertical,
       pagingEnabled,
       snapEnabled,
@@ -70,18 +71,17 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
   const scrollEndTranslation = useSharedValue(0);
   const scrollEndVelocity = useSharedValue(0);
   const containerRef = useAnimatedRef<Animated.View>();
-  const maxScrollDistancePerSwipeIsSet = typeof maxScrollDistancePerSwipe === "number";
+  const maxScrollDistancePerSwipeIsSet = typeof maxScrollDistancePerSwipe === 'number';
 
   // Get the limit of the scroll.
   const getLimit = React.useCallback(() => {
-    "worklet";
+    'worklet';
 
     if (!infinite && !overscrollEnabled) {
       const { width: containerWidth = 0 } = measure(containerRef);
 
       // If the item's total width is less than the container's width, then there is no need to scroll.
-      if (dataLength * size < containerWidth)
-        return 0;
+      if (dataLength * size < containerWidth) return 0;
 
       // Disable the "overscroll" effect
       return dataLength * size - containerWidth;
@@ -92,9 +92,9 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
 
   const withSpring = React.useCallback(
     (toValue: number, onFinished?: () => void) => {
-      "worklet";
+      'worklet';
       const defaultWithAnimation: WithTimingAnimation = {
-        type: "timing",
+        type: 'timing',
         config: {
           duration: scrollAnimationDuration + 100,
           easing: Easing.easeOutQuart,
@@ -104,9 +104,8 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
       return dealWithAnimation(withAnimation ?? defaultWithAnimation)(
         toValue,
         (isFinished: boolean) => {
-          "worklet";
-          if (isFinished)
-            onFinished && runOnJS(onFinished)();
+          'worklet';
+          if (isFinished) onFinished && runOnJS(onFinished)();
         },
       );
     },
@@ -115,24 +114,26 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
 
   const endWithSpring = React.useCallback(
     (onFinished?: () => void) => {
-      "worklet";
+      'worklet';
       const origin = translation.value;
       const velocity = scrollEndVelocity.value;
       // Default to scroll in the direction of the slide (with deceleration)
       let finalTranslation: number = withDecay({ velocity, deceleration: 0.999 });
 
       // If the distance of the swipe exceeds the max scroll distance, keep the view at the current position
-      if (maxScrollDistancePerSwipeIsSet && Math.abs(scrollEndTranslation.value) > maxScrollDistancePerSwipe) {
+      if (
+        maxScrollDistancePerSwipeIsSet &&
+        Math.abs(scrollEndTranslation.value) > maxScrollDistancePerSwipe
+      ) {
         finalTranslation = origin;
-      }
-      else {
-      /**
-       * The page size is the same as the item size.
-       * If direction is vertical, the page size is the height of the item.
-       * If direction is horizontal, the page size is the width of the item.
-      *
-      * `page size` equals to `size` variable.
-      * */
+      } else {
+        /**
+         * The page size is the same as the item size.
+         * If direction is vertical, the page size is the height of the item.
+         * If direction is horizontal, the page size is the width of the item.
+         *
+         * `page size` equals to `size` variable.
+         * */
         if (pagingEnabled) {
           // distance with direction
           const offset = -(scrollEndTranslation.value >= 0 ? 1 : -1); // 1 or -1
@@ -142,8 +143,7 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
           if (infinite) {
             const finalPage = page + offset;
             finalTranslation = withSpring(withProcessTranslation(-finalPage * size), onFinished);
-          }
-          else {
+          } else {
             const finalPage = Math.min(maxPage - 1, Math.max(0, page + offset));
             finalTranslation = withSpring(withProcessTranslation(-finalPage * size), onFinished);
           }
@@ -185,7 +185,7 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
 
   const onFinish = React.useCallback(
     (isFinished: boolean) => {
-      "worklet";
+      'worklet';
       if (isFinished) {
         touching.value = false;
         onScrollEnd && runOnJS(onScrollEnd)();
@@ -195,18 +195,16 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
   );
 
   const activeDecay = React.useCallback(() => {
-    "worklet";
+    'worklet';
     touching.value = true;
-    translation.value = withDecay(
-      { velocity: scrollEndVelocity.value },
-      isFinished => onFinish(isFinished as boolean),
+    translation.value = withDecay({ velocity: scrollEndVelocity.value }, isFinished =>
+      onFinish(isFinished as boolean),
     );
   }, [onFinish, scrollEndVelocity.value, touching, translation]);
 
   const resetBoundary = React.useCallback(() => {
-    "worklet";
-    if (touching.value)
-      return;
+    'worklet';
+    if (touching.value) return;
 
     if (translation.value > 0) {
       if (scrollEndTranslation.value < 0) {
@@ -224,8 +222,7 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
         activeDecay();
         return;
       }
-      if (!infinite)
-        translation.value = withSpring(-((maxPage - 1) * size));
+      if (!infinite) translation.value = withSpring(-((maxPage - 1) * size));
     }
   }, [
     touching.value,
@@ -241,14 +238,13 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
   useAnimatedReaction(
     () => translation.value,
     () => {
-      if (!pagingEnabled)
-        resetBoundary();
+      if (!pagingEnabled) resetBoundary();
     },
     [pagingEnabled, resetBoundary],
   );
 
   function withProcessTranslation(translation: number) {
-    "worklet";
+    'worklet';
 
     if (!infinite && !overscrollEnabled) {
       const limit = getLimit();
@@ -260,15 +256,14 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
   }
 
   const onGestureBegin = useCallback(() => {
-    "worklet";
+    'worklet';
 
     touching.value = true;
     validStart.value = true;
     onScrollBegin && runOnJS(onScrollBegin)();
 
     max.value = (maxPage - 1) * size;
-    if (!infinite && !overscrollEnabled)
-      max.value = getLimit();
+    if (!infinite && !overscrollEnabled) max.value = getLimit();
 
     panOffset.value = translation.value;
   }, [
@@ -285,89 +280,184 @@ const IScrollViewGesture: React.FC<PropsWithChildren<Props>> = (props) => {
     onScrollBegin,
   ]);
 
-  const onGestureUpdate = useCallback((e: PanGestureHandlerEventPayload) => {
-    "worklet";
+  const onGestureUpdate = useCallback(
+    (e: PanGestureHandlerEventPayload) => {
+      'worklet';
 
-    if (validStart.value) {
-      validStart.value = false;
-      cancelAnimation(translation);
-    }
-    touching.value = true;
-    const { translationX, translationY } = e;
-    const panTranslation = isHorizontal.value
-      ? translationX
-      : translationY;
-    if (!infinite) {
-      if ((translation.value > 0 || translation.value < -max.value)) {
-        const boundary = translation.value > 0 ? 0 : -max.value;
-        const fixed = boundary - panOffset.value;
-        const dynamic = panTranslation - fixed;
-        translation.value = boundary + dynamic * 0.5;
-        return;
+      if (validStart.value) {
+        validStart.value = false;
+        cancelAnimation(translation);
+      }
+      touching.value = true;
+      const { translationX, translationY } = e;
+      const panTranslation = isHorizontal.value ? translationX : translationY;
+      if (!infinite) {
+        if (translation.value > 0 || translation.value < -max.value) {
+          const boundary = translation.value > 0 ? 0 : -max.value;
+          const fixed = boundary - panOffset.value;
+          const dynamic = panTranslation - fixed;
+          translation.value = boundary + dynamic * 0.5;
+          return;
+        }
+      }
+
+      const translationValue = panOffset.value + panTranslation;
+      translation.value = translationValue;
+    },
+    [isHorizontal, max, panOffset, infinite, overscrollEnabled, translation, validStart, touching],
+  );
+
+  const onGestureFinish = useCallback(
+    (e: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {
+      'worklet';
+
+      const { velocityX, velocityY, translationX, translationY } = e;
+      scrollEndVelocity.value = isHorizontal.value ? velocityX : velocityY;
+      scrollEndTranslation.value = isHorizontal.value ? translationX : translationY;
+
+      const totalTranslation = scrollEndVelocity.value + scrollEndTranslation.value;
+
+      if (
+        maxScrollDistancePerSwipeIsSet &&
+        Math.abs(totalTranslation) > maxScrollDistancePerSwipe
+      ) {
+        const nextPage =
+          Math.round(
+            (panOffset.value + maxScrollDistancePerSwipe * Math.sign(totalTranslation)) / size,
+          ) * size;
+        translation.value = withSpring(withProcessTranslation(nextPage), onScrollEnd);
+      } else {
+        endWithSpring(onScrollEnd);
       }
+
+      if (!infinite) touching.value = false;
+    },
+    [
+      size,
+      infinite,
+      touching,
+      panOffset,
+      translation,
+      isHorizontal,
+      scrollEndVelocity,
+      scrollEndTranslation,
+      maxScrollDistancePerSwipeIsSet,
+      maxScrollDistancePerSwipe,
+      endWithSpring,
+      withSpring,
+      onScrollEnd,
+    ],
+  );
+
+  const gesture = useMemo(() => {
+    const panGesture = Gesture.Pan()
+      .onBegin(onGestureBegin)
+      .onUpdate(onGestureUpdate)
+      .onEnd(onGestureFinish);
+
+    const {
+      activateAfterLongPress,
+      activeOffsetXEnd,
+      activeOffsetXStart,
+      activeOffsetYEnd,
+      activeOffsetYStart,
+      avgTouches,
+      cancelsTouchesInView,
+      enabled,
+      enableTrackpadTwoFingerGesture,
+      failOffsetXEnd,
+      failOffsetXStart,
+      failOffsetYEnd,
+      failOffsetYStart,
+      hitSlop,
+      manualActivation,
+      maxPointers,
+      minDist,
+      minPointers,
+      minVelocity,
+      minVelocityX,
+      minVelocityY,
+      shouldCancelWhenOutside,
+    } = panGestureHandlerProps ?? {};
+
+    if (typeof activateAfterLongPress === 'number') {
+      panGesture.activateAfterLongPress(activateAfterLongPress);
     }
 
-    const translationValue = panOffset.value + panTranslation;
-    translation.value = translationValue;
-  }, [
-    isHorizontal,
-    max,
-    panOffset,
-    infinite,
-    overscrollEnabled,
-    translation,
-    validStart,
-    touching,
-  ]);
+    if (typeof activeOffsetXStart === 'number' || typeof activeOffsetXEnd === 'number') {
+      panGesture.activeOffsetX([activeOffsetXStart ?? 0, activeOffsetXEnd ?? 0]);
+    }
 
-  const onGestureFinish = useCallback((e: GestureStateChangeEvent<PanGestureHandlerEventPayload>) => {
-    "worklet";
+    if (typeof activeOffsetYStart === 'number' || typeof activeOffsetYEnd === 'number') {
+      panGesture.activeOffsetY([activeOffsetYStart ?? 0, activeOffsetYEnd ?? 0]);
+    }
 
-    const { velocityX, velocityY, translationX, translationY } = e;
-    scrollEndVelocity.value = isHorizontal.value
-      ? velocityX
-      : velocityY;
-    scrollEndTranslation.value = isHorizontal.value
-      ? translationX
-      : translationY;
+    if (typeof avgTouches === 'boolean') {
+      panGesture.averageTouches(avgTouches);
+    }
 
-    const totalTranslation = scrollEndVelocity.value + scrollEndTranslation.value;
+    if (typeof cancelsTouchesInView === 'boolean') {
+      panGesture.cancelsTouchesInView(cancelsTouchesInView);
+    }
 
-    if (maxScrollDistancePerSwipeIsSet && Math.abs(totalTranslation) > maxScrollDistancePerSwipe) {
-      const nextPage = Math.round((panOffset.value + maxScrollDistancePerSwipe * Math.sign(totalTranslation)) / size) * size;
-      translation.value = withSpring(withProcessTranslation(nextPage), onScrollEnd);
+    if (typeof enabled === 'boolean') {
+      panGesture.enabled(enabled);
     }
-    else {
-      endWithSpring(onScrollEnd);
+
+    if (typeof enableTrackpadTwoFingerGesture === 'boolean') {
+      panGesture.enableTrackpadTwoFingerGesture(enableTrackpadTwoFingerGesture);
     }
 
-    if (!infinite)
-      touching.value = false;
-  }, [
-    size,
-    infinite,
-    touching,
-    panOffset,
-    translation,
-    isHorizontal,
-    scrollEndVelocity,
-    scrollEndTranslation,
-    maxScrollDistancePerSwipeIsSet,
-    maxScrollDistancePerSwipe,
-    endWithSpring,
-    withSpring,
-    onScrollEnd,
-  ]);
+    if (typeof failOffsetXStart === 'number' || typeof failOffsetXEnd === 'number') {
+      panGesture.failOffsetX([failOffsetXStart ?? -1, failOffsetXEnd ?? 1]);
+    }
 
-  const gesture = useMemo(() => Gesture.Pan().onBegin(onGestureBegin).onUpdate(onGestureUpdate).onEnd(onGestureFinish), [
-    onGestureBegin,
-    onGestureUpdate,
-    onGestureFinish,
-  ]);
+    if (typeof failOffsetYStart === 'number' || typeof failOffsetYEnd === 'number') {
+      panGesture.failOffsetY([failOffsetYStart ?? -1, failOffsetYEnd ?? 1]);
+    }
+
+    if (typeof hitSlop === 'number') {
+      panGesture.hitSlop(hitSlop);
+    }
+
+    if (typeof manualActivation === 'boolean') {
+      panGesture.manualActivation(manualActivation);
+    }
+
+    if (typeof maxPointers === 'number') {
+      panGesture.maxPointers(maxPointers);
+    }
+
+    if (typeof minDist === 'number') {
+      panGesture.minDistance(minDist);
+    }
+
+    if (typeof minPointers === 'number') {
+      panGesture.minPointers(minPointers);
+    }
+
+    if (typeof shouldCancelWhenOutside === 'boolean') {
+      panGesture.shouldCancelWhenOutside(shouldCancelWhenOutside);
+    }
+
+    if (typeof minVelocity === 'number') {
+      panGesture.minVelocity(minVelocity);
+    }
+
+    if (typeof minVelocityX === 'number') {
+      panGesture.minVelocityX(minVelocityX);
+    }
+
+    if (typeof minVelocityY === 'number') {
+      panGesture.minVelocityY(minVelocityY);
+    }
+
+    return panGesture;
+  }, [onGestureBegin, onGestureUpdate, onGestureFinish, panGestureHandlerProps]);
   const GestureContainer = enabled ? GestureDetector : React.Fragment;
 
   return (
-    <GestureContainer gesture={gesture}>
+    <GestureContainer gesture={gesture} userSelect={panGestureHandlerProps?.userSelect}>
       <Animated.View
         ref={containerRef}
         testID={testID}
diff --git a/src/types.ts b/src/types.ts
index 4cb270a4bb5ec56c99c425b034de3ac9cc04340c..2ec59d3044eb51ad6bb36a507b6203eeca6cff39 100644
--- a/src/types.ts
+++ b/src/types.ts
@@ -1,243 +1,236 @@
-import type { StyleProp, ViewStyle } from "react-native";
-import type { PanGestureHandlerProps } from "react-native-gesture-handler";
+import type { StyleProp, ViewStyle } from 'react-native';
+import type Animated from 'react-native-reanimated';
 import type {
-  AnimatedStyleProp,
-  SharedValue,
-  WithSpringConfig,
-  WithTimingConfig,
-} from "react-native-reanimated";
-import type Animated from "react-native-reanimated";
+   AnimatedStyleProp,
+   SharedValue,
+   WithSpringConfig,
+   WithTimingConfig,
+} from 'react-native-reanimated';
 
-import type { TParallaxModeProps } from "./layouts/parallax";
-import type { TStackModeProps } from "./layouts/stack";
+import { PanGestureConfig } from 'react-native-gesture-handler/src/handlers/PanGestureHandler';
+import type { TParallaxModeProps } from './layouts/parallax';
+import type { TStackModeProps } from './layouts/stack';
 
 export type IComputedDirectionTypes<T, VP = {}, HP = {}> =
-    | (T &
-    VP & {
-      /**
-               * Layout items vertically instead of horizontally
-               */
-      vertical: true
-      /**
-               * Layout items vertically instead of horizontally
-               */
-      /**
-               * Specified carousel container width.
-               */
-      width?: number
-      height: number
-    })
-    | (T &
-    HP & {
-      /**
-               * Layout items vertically instead of horizontally
-               */
-      vertical?: false
-      /**
-               * Layout items vertically instead of horizontally
-               */
-      /**
-               * Specified carousel container width.
-               */
-      width: number
-      height?: number
-    });
+  | (T &
+      VP & {
+        /**
+         * Layout items vertically instead of horizontally
+         */
+        vertical: true;
+        /**
+         * Layout items vertically instead of horizontally
+         */
+        /**
+         * Specified carousel container width.
+         */
+        width?: number;
+        height: number;
+      })
+  | (T &
+      HP & {
+        /**
+         * Layout items vertically instead of horizontally
+         */
+        vertical?: false;
+        /**
+         * Layout items vertically instead of horizontally
+         */
+        /**
+         * Specified carousel container width.
+         */
+        width: number;
+        height?: number;
+      });
 
 export interface CustomConfig {
-  type?: "negative" | "positive"
-  viewCount?: number
+  type?: 'negative' | 'positive';
+  viewCount?: number;
 }
 
 export interface WithSpringAnimation {
-  type: "spring"
-  config: WithSpringConfig
+  type: 'spring';
+  config: WithSpringConfig;
 }
 
 export interface WithTimingAnimation {
-  type: "timing"
-  config: WithTimingConfig
+  type: 'timing';
+  config: WithTimingConfig;
 }
 
 export type WithAnimation = WithSpringAnimation | WithTimingAnimation;
 
 export type TCarouselProps<T = any> = {
-  ref?: React.Ref<ICarouselInstance>
-  /**
-     * The default animated value of the carousel.
-     */
-  defaultScrollOffsetValue?: SharedValue<number>
-  /**
-     * Carousel loop playback.
-     * @default true
-     */
-  loop?: boolean
-  /**
-     * Carousel items data set.
-     */
-  data: T[]
-  /**
-     * Auto fill data array to allow loop playback when the loop props is true.
-     * @default true
-     * @example
-     * [1] => [1, 1, 1]
-     * [1, 2] => [1, 2, 1, 2]
-     */
-  autoFillData?: boolean
-  /**
-     * Default index
-     * @default 0
-     */
-  defaultIndex?: number
-  /**
-     * Auto play
-     */
-  autoPlay?: boolean
-  /**
-     * Auto play
-     * @description reverse playback
-     */
-  autoPlayReverse?: boolean
-  /**
-     * Auto play
-     * @description playback interval
-     */
-  autoPlayInterval?: number
-  /**
-     * Time a scroll animation takes to finish
-     * @default 500 (ms)
-     */
-  scrollAnimationDuration?: number
-  /**
-     * Carousel container style
-     */
-  style?: StyleProp<ViewStyle>
-  /**
-     * PanGestureHandler props
-     */
-  panGestureHandlerProps?: Partial<
-  Omit<PanGestureHandlerProps, "onHandlerStateChange" | "enabled">
-  >
-  /**
-     * Determines the maximum number of items will respond to pan gesture events,
-     * windowSize={11} will active visible item plus up to 5 items above and 5 below the viewpor,
-     * Reducing this number will reduce the calculation of the animation value and may improve performance.
-     * @default 0 all items will respond to pan gesture events.
-     */
-  windowSize?: number
-  /**
-     * When true, the scroll view stops on multiples of the scroll view's size when scrolling.
-     * @default true
-     */
-  pagingEnabled?: boolean
-  /**
-     * If enabled, releasing the touch will scroll to the nearest item.
-     * valid when pagingEnabled=false
-     * @default true
-     */
-  snapEnabled?: boolean
-  /**
-     * If enabled, items will scroll to the first placement when scrolling past the edge rather than closing to the last. (previous conditions: loop=false)
-     * @default true
-     */
-  overscrollEnabled?: boolean
-  /**
-     * If false, Carousel will not respond to any gestures.
-     * @default true
-     */
-  enabled?: boolean
-  /**
-     * Specifies the scrolling animation effect.
-     */
-  withAnimation?: WithAnimation
-  /**
-     * Used to locate this view in end-to-end tests.
-     */
-  testID?: string
-  /**
-    * Maximum offset value for once scroll.
-    * props.vertical = true => maxScrollDistancePerSwipeY
-    * props.vertical = false => maxScrollDistancePerSwipeX
-    * */
-  maxScrollDistancePerSwipe?: number
-  /**
-     * Custom carousel config.
-     */
-  customConfig?: () => CustomConfig
-  /**
-     * Custom animations.
-     * Must use `worklet`, Details: https://docs.swmansion.com/react-native-reanimated/docs/2.2.0/worklets/
-     */
-  customAnimation?: (value: number) => AnimatedStyleProp<ViewStyle>
-  /**
-     * Render carousel item.
-     */
-  renderItem: CarouselRenderItem<T>
-  /**
-     * Callback fired when navigating to an item.
-     */
-  onSnapToItem?: (index: number) => void
-  /**
-     * On scroll begin
-     */
-  onScrollBegin?: () => void
-  /**
-     * On scroll end
-     */
-  onScrollEnd?: (index: number) => void
-  /**
-     * On progress change
-     * @param offsetProgress Total of offset distance (0 390 780 ...)
-     * @param absoluteProgress Convert to index (0 1 2 ...)
-     */
-  onProgressChange?: (
-    offsetProgress: number,
-    absoluteProgress: number
-  ) => void
+  ref?: React.Ref<ICarouselInstance>;
+  /**
+   * The default animated value of the carousel.
+   */
+  defaultScrollOffsetValue?: SharedValue<number>;
+  /**
+   * Carousel loop playback.
+   * @default true
+   */
+  loop?: boolean;
+  /**
+   * Carousel items data set.
+   */
+  data: T[];
+  /**
+   * Auto fill data array to allow loop playback when the loop props is true.
+   * @default true
+   * @example
+   * [1] => [1, 1, 1]
+   * [1, 2] => [1, 2, 1, 2]
+   */
+  autoFillData?: boolean;
+  /**
+   * Default index
+   * @default 0
+   */
+  defaultIndex?: number;
+  /**
+   * Auto play
+   */
+  autoPlay?: boolean;
+  /**
+   * Auto play
+   * @description reverse playback
+   */
+  autoPlayReverse?: boolean;
+  /**
+   * Auto play
+   * @description playback interval
+   */
+  autoPlayInterval?: number;
+  /**
+   * Time a scroll animation takes to finish
+   * @default 500 (ms)
+   */
+  scrollAnimationDuration?: number;
+  /**
+   * Carousel container style
+   */
+  style?: StyleProp<ViewStyle>;
+  /**
+   * PanGestureHandler props
+   */
+  panGestureHandlerProps?: PanGestureConfig;
+  /**
+   * Determines the maximum number of items will respond to pan gesture events,
+   * windowSize={11} will active visible item plus up to 5 items above and 5 below the viewpor,
+   * Reducing this number will reduce the calculation of the animation value and may improve performance.
+   * @default 0 all items will respond to pan gesture events.
+   */
+  windowSize?: number;
+  /**
+   * When true, the scroll view stops on multiples of the scroll view's size when scrolling.
+   * @default true
+   */
+  pagingEnabled?: boolean;
+  /**
+   * If enabled, releasing the touch will scroll to the nearest item.
+   * valid when pagingEnabled=false
+   * @default true
+   */
+  snapEnabled?: boolean;
+  /**
+   * If enabled, items will scroll to the first placement when scrolling past the edge rather than closing to the last. (previous conditions: loop=false)
+   * @default true
+   */
+  overscrollEnabled?: boolean;
+  /**
+   * If false, Carousel will not respond to any gestures.
+   * @default true
+   */
+  enabled?: boolean;
+  /**
+   * Specifies the scrolling animation effect.
+   */
+  withAnimation?: WithAnimation;
+  /**
+   * Used to locate this view in end-to-end tests.
+   */
+  testID?: string;
+  /**
+   * Maximum offset value for once scroll.
+   * props.vertical = true => maxScrollDistancePerSwipeY
+   * props.vertical = false => maxScrollDistancePerSwipeX
+   * */
+  maxScrollDistancePerSwipe?: number;
+  /**
+   * Custom carousel config.
+   */
+  customConfig?: () => CustomConfig;
+  /**
+   * Custom animations.
+   * Must use `worklet`, Details: https://docs.swmansion.com/react-native-reanimated/docs/2.2.0/worklets/
+   */
+  customAnimation?: (value: number) => AnimatedStyleProp<ViewStyle>;
+  /**
+   * Render carousel item.
+   */
+  renderItem: CarouselRenderItem<T>;
+  /**
+   * Callback fired when navigating to an item.
+   */
+  onSnapToItem?: (index: number) => void;
+  /**
+   * On scroll begin
+   */
+  onScrollBegin?: () => void;
+  /**
+   * On scroll end
+   */
+  onScrollEnd?: (index: number) => void;
+  /**
+   * On progress change
+   * @param offsetProgress Total of offset distance (0 390 780 ...)
+   * @param absoluteProgress Convert to index (0 1 2 ...)
+   */
+  onProgressChange?: (offsetProgress: number, absoluteProgress: number) => void;
 
   // ============================== deprecated props ==============================
   /**
-     * If enabled, releasing the touch will scroll to the nearest item.
-     * valid when pagingEnabled=false
-     * @deprecated please use snapEnabled instead
-     */
-  enableSnap?: boolean
+   * If enabled, releasing the touch will scroll to the nearest item.
+   * valid when pagingEnabled=false
+   * @deprecated please use snapEnabled instead
+   */
+  enableSnap?: boolean;
 } & (TParallaxModeProps | TStackModeProps);
 
 export interface ICarouselInstance {
   /**
-     * Scroll to previous item, it takes one optional argument (count),
-     * which allows you to specify how many items to cross
-     */
-  prev: (opts?: Omit<TCarouselActionOptions, "index">) => void
+   * Scroll to previous item, it takes one optional argument (count),
+   * which allows you to specify how many items to cross
+   */
+  prev: (opts?: Omit<TCarouselActionOptions, 'index'>) => void;
   /**
-     * Scroll to next item, it takes one optional argument (count),
-     * which allows you to specify how many items to cross
-     */
-  next: (opts?: Omit<TCarouselActionOptions, "index">) => void
+   * Scroll to next item, it takes one optional argument (count),
+   * which allows you to specify how many items to cross
+   */
+  next: (opts?: Omit<TCarouselActionOptions, 'index'>) => void;
   /**
-     * Get current item index
-     */
-  getCurrentIndex: () => number
+   * Get current item index
+   */
+  getCurrentIndex: () => number;
   /**
-     * Use value to scroll to a position where relative to the current position,
-     * scrollTo(-2) is equivalent to prev(2), scrollTo(2) is equivalent to next(2)
-     */
-  scrollTo: (opts?: TCarouselActionOptions) => void
+   * Use value to scroll to a position where relative to the current position,
+   * scrollTo(-2) is equivalent to prev(2), scrollTo(2) is equivalent to next(2)
+   */
+  scrollTo: (opts?: TCarouselActionOptions) => void;
 }
 
 export interface CarouselRenderItemInfo<ItemT> {
-  item: ItemT
-  index: number
-  animationValue: Animated.SharedValue<number>
+  item: ItemT;
+  index: number;
+  animationValue: Animated.SharedValue<number>;
 }
 
-export type CarouselRenderItem<ItemT> = (
-  info: CarouselRenderItemInfo<ItemT>
-) => React.ReactElement;
+export type CarouselRenderItem<ItemT> = (info: CarouselRenderItemInfo<ItemT>) => React.ReactElement;
 
 export interface TCarouselActionOptions {
-  index?: number
-  count?: number
-  animated?: boolean
-  onFinished?: () => void
+  index?: number;
+  count?: number;
+  animated?: boolean;
+  onFinished?: () => void;
 }
